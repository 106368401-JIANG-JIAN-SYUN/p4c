/* -*-C++-*-
   This file contains the base classes needed for the compiler IR:
   - all interfaces
   - most basic abstract classes
   - some simple leaf classes used frequently
*/

// a value that can be evaluated at compile-time
interface CompileTimeValue {}

abstract Type {
#emit
    typedef Type_Unknown        Unknown;
    typedef Type_Boolean        Boolean;
    typedef Type_Bits           Bits;
    typedef Type_Varbits        Varbits;
#end
    // This is well-defined only for types with fixed width
    virtual int width_bits() const { return 0; }
}

// Implemented by all types that may be generic
interface IMayBeGenericType {
    virtual const TypeParameters* getTypeParameters() const = 0;
    const Type* toType() const { return to<Type>(); }
}

// Implemented by objects with an 'apply' method
interface IApply {
    static const cstring applyMethodName;
    virtual const Type_Method* getApplyMethodType() const = 0;
}

interface INamespace {
    virtual Util::Enumerator<IDeclaration> *getDeclarations() const = 0;
}

// No two declarations with the same name
interface ISimpleNamespace : INamespace {
    virtual IDeclaration getDeclByName(cstring name) const = 0;
}

// A general namespace can have multiple declarations with the same name
// E.g., an extern can have multiple methods with the same name.
interface IGeneralNamespace : INamespace {
    virtual Util::Enumerator<IDeclaration>* getDeclsByName(cstring name) const;
    void checkDuplicateDeclarations() const;
    validate{ checkDuplicateDeclarations(); }
}

// Implemented by things that look like type variables
interface ITypeVar {
    virtual cstring getVarName() const = 0;
    inline Type asType() const { return to<Type>(); }
}

// Implemented by P4Parser, P4Control and Type_Package
interface IContainer : IMayBeGenericType {
    // The type of the constructor as a method
    virtual Type_Method getConstructorMethodType() const = 0;
    virtual ParameterList getConstructorParameters() const = 0;
}

// This represents a primitive type
// (called base type in the spec)
abstract Type_Base : Type {}

// This is needed by Expression
class Type_Unknown : Type_Base {
#nodbprint
    static Type_Unknown get();
    toString{ return "Unknown type"; }
}

// A statement or a declaration
abstract StatOrDecl {}

// Two declarations with the same name are not necessarily the same declaration.
// That's why declid is used to distinguish them.
abstract Declaration : StatOrDecl, IDeclaration {
    ID          name;
    int declid = nextId++;
    ID getName() const override { return name; }
 private:
    static int nextId;
 public:
    dbprint { Node::dbprint(out); out << name << "/" << declid; }
    toString { return externalName(); }
}

// A declaration which introduces a type.
// Two declarations with the same name are not the same declaration
// That's why declid is used to distinguish them.
abstract Type_Declaration : Type, IDeclaration {
    ID name;
    int declid = nextId++;
    ID getName() const override { return name; }
 private:
    static int nextId;
 public:
    toString { return externalName(); }
    dbprint { Node::dbprint(out); out << name << "/" << declid; }
}

abstract Expression {
    // Note that the type field is not visited.
    // Most P4_16 passes don't use this field.
    // It is a used to hold the result of TypeInferencing for the expression.
    // It is used by the P4_14 front-end and by some back-ends.
    // It is not visited by the visitors by default (can be visited explicitly in preorder)
    optional Type type = Type::Unknown::get();
    visit_children { (void)v; }
}

abstract Operation : Expression {
    virtual int getPrecedence() const = 0;
    virtual cstring getStringOp() const = 0;
#emit
    typedef Operation_Unary Unary;
    typedef Operation_Binary Binary;
    typedef Operation_Relation Relation;
#end
    toString{ return getStringOp(); }
}

class PathPrefix {
    bool absolute = false;
    optional vector<ID> components;
    PathPrefix(Util::SourceInfo si, PathPrefix start, ID end)
            : Node(si), absolute(start->absolute) {
        CHECK_NULL(start);
        std::copy(start->components.begin(), start->components.end(), components.begin());
        components.push_back(end); }
    void setAbsolute() { absolute = true; }
    toString{
        // Prints path prefix without the trailing dot
        std::stringstream result;
        bool first = true;
        if (absolute)
            first = false;
        for (auto a : components) {
            if (!first)
                result << ".";
            first = false;
            result << a.name.c_str();
        }
        return cstring(result.str());
    }
#nodbprint
}

class Path {
    optional NullOK PathPrefix prefix;
    ID                name;
    Path { if (!srcInfo) srcInfo = prefix ? prefix->srcInfo + name.srcInfo : name.srcInfo; }
    bool isDontCare() const { return prefix == nullptr && name.isDontCare(); }
    toString{
        std::stringstream str;
        if (prefix == nullptr) {
            str << name;
        } else {
            cstring ps = prefix->toString();
            str << ps << "." << name;
        }
        return cstring(str.str());
    }
    dbprint{ Node::dbprint(out); out << ":" << toString(); }
}

class Annotation {
    ID name;
    NullOK Expression expr;
    Annotation { if (!srcInfo) srcInfo = name.srcInfo; }
    Annotation(cstring n, intmax_t v) : name(n), expr(new IR::Constant(v)) {}
    // Predefined annotations used by the compiler
    static const cstring nameAnnotation;
    toString{ return cstring("@") + name; }
#nodbprint
    validate{ BUG_CHECK(!name.name.isNullOrEmpty(), "empty annotation name"); }
}

// There can be several annotations with the same "name", so this is a vector.
class Annotations {
    Vector<Annotation> annotations;
#nodbprint
    Annotations { if (!srcInfo && annotations) srcInfo = annotations->srcInfo; }
    static Annotations *empty;  // FIXME -- should be const
    size_t size() const { return annotations->size(); }
    // Get the annotation with the specified name or nullptr.
    // There should be at most one annotation with this name.
    Annotation getSingle(cstring name) const { return get(annotations, name); }
    Annotations addAnnotation(cstring name, Expression expr) const {
        auto vec = new Vector<Annotation>(*annotations);
        vec->push_back(new Annotation(name, expr));
        return new Annotations(vec);
    }
    // Add annotation if another annotation with the same name is not
    // already present.
    Annotations addAnnotationIfNew(cstring name, Expression expr) const {
        if (getSingle(name) != nullptr)
            return this;
        return addAnnotation(name, expr);
    }
    // If annotations with the same name are already present, remove them.
    // Add this annotation.
    Annotations addOrReplace(cstring name, Expression expr) const {
        auto vec = new Vector<Annotation>();
        for (auto a : *annotations) {
            if (a->name.name != name)
                vec->push_back(new Annotation(name, expr));
        }
        vec->push_back(new Annotation(name, expr));
        return new Annotations(vec);
    }
    validate{ annotations->check_null(); }
}

// Implemented by all objects that can have annotations
interface IAnnotated {
    virtual Annotations getAnnotations() const = 0;
}
