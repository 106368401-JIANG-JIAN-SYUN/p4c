#!/usr/bin/env python
# This sript works around limitations of the automake tests
# by generating a portion of the makefile.
# The problem is that the makefiles do not allow passing any
# arguments to the test programs, so there is no way we can
# run the same test program twice with different arguments.
# We generate a separate little custom script for each
# program that we need to test, and we add that script to the makefile
# as a target.
#
# For example, `gen-tests.py dir pre command a b
# generates on stdout:
# TESTS += \
#	 prea.test \
#	 preb.test 
# CLEANFILES += \
#	 prea.test \
#	 preb.test
# and two scripts prea.test and preb.test.  The contents of prea.test is just:
# command dir a

from __future__ import print_function
import sys
import os
import stat

def usage(exe):
    print(exe, ": Generate part of Makefile and supporting scripts for testing")
    print("Please read the python file for usage");

def filename(prefix, testname):
    test = prefix + '/' + testname + ".test"
    return test
    
def generate(exe, srcdir, prefix, command, test_args):
    print("## Generated by ", exe)
    print("TESTS += \\")
    for i in range(0, len(test_args)):
        test = filename(prefix, test_args[i])
        print("\t", test, "\\" if (i < (len(test_args) - 1)) else "")

    print
    print("CLEANFILES += \\")
    for i in range(0, len(test_args)):
        test = filename(prefix, test_args[i])
        print("\t", test, "\\" if (i < (len(test_args) - 1)) else "")

    print
    for i in range(0, len(test_args)):
        test = filename(prefix, test_args[i])
        print(test, ": ", test_args[i])
        print("\t@mkdir -p", os.path.dirname(test))
        print("\t@echo \"cd $$PWD\" >$@")
        # This $* may be handy when running the test by hand.
        # Make will never pass anything there
        print("\t@echo '"+command, srcdir, "$$*", srcdir+"/"+test_args[i]+"' >>$@")
        print("\t@chmod +x $@")
        print
        
def main(argv):
    if len(argv) < 5:
        usage(argv[0])
        return
    srcdir = argv[1]
    prefix = argv[2]
    command = argv[3]
    test_args = argv[4:]
    for i in range(0, len(test_args)):
        if test_args[i].startswith(srcdir):
            test_args[i] = test_args[i][len(srcdir):]
            if test_args[i].startswith('/'):
                test_args[i] = test_args[i][1:]
    generate(argv[0], srcdir, prefix, command, test_args)
    
if __name__ == "__main__":
    main(sys.argv)

